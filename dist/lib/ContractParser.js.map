{"version":3,"file":"ContractParser.js","names":["_interfacesIds","_interopRequireDefault","require","_rskUtils","_NativeContractsDecoder","_NativeContracts","_Contract","_EventDecoder","_Abi","_types","_utils","obj","__esModule","default","mapInterfacesToERCs","interfaces","Object","keys","filter","k","map","t","contractsInterfaces","hasMethodSelector","txInputData","selector","includes","ContractParser","constructor","abi","log","initConfig","nod3","txBlockNumber","net","netId","id","undefined","setAbi","defaultABI","console","nativeContracts","NativeContracts","bitcoinNetwork","bitcoinRskNetWorks","nativeContractsEvents","NativeContractsDecoder","setNod3","getNativeContractAddress","name","getMethodsSelectors","selectors","methods","getAbiMethods","m","method","signature","soliditySignature","soliditySelector","def","type","sig","ABI_SIGNATURE","abiSignatureData","parseTxLogs","logs","decodeLogs","event","addEventAddresses","removeAbiSignatureData","args","_addresses","inputs","forEach","v","i","push","value","Array","isArray","length","slice","Set","eventDecoder","EventDecoder","Error","isNativeContract","address","decoder","getEventDecoder","decodeLog","makeContract","Contract","call","contract","params","options","res","err","getTokenData","result","Promise","all","then","catch","debug","reduce","a","getMethodsBySelectors","getContractInfo","getContractImplementedInterfaces","getEIP1967Info","contractAddress","isUpgradeable","impContractAddress","isERC1967","proxyContractBytecode","getContractCodeFromNode","getInterfacesByMethods","isErc165","includesAll","implementsErc165","getInterfacesERC165","storedValue","eth","getStorageAt","getContractCodeAt","ifaces","interfacesIds","supportsInterface","interfaceId","gas","first","ERC165","second","reject","exports","_default"],"sources":["../../src/lib/ContractParser.js"],"sourcesContent":["import interfacesIds from './interfacesIds'\nimport { includesAll } from '@rsksmart/rsk-utils'\nimport NativeContractsDecoder from './nativeContracts/NativeContractsDecoder'\nimport NativeContracts from './nativeContracts/NativeContracts'\nimport Contract from './Contract'\nimport EventDecoder from './EventDecoder'\nimport defaultABI from './Abi'\nimport { ABI_SIGNATURE, bitcoinRskNetWorks, contractsInterfaces } from './types'\nimport {\n  setAbi,\n  removeAbiSignatureData,\n  abiSignatureData,\n  soliditySelector,\n  soliditySignature\n} from './utils'\n\nfunction mapInterfacesToERCs (interfaces) {\n  return Object.keys(interfaces)\n    .filter(k => interfaces[k] === true)\n    .map(t => contractsInterfaces[t] || t)\n}\n\nfunction hasMethodSelector (txInputData, selector) {\n  return selector && txInputData && txInputData.includes(selector)\n}\n\nexport class ContractParser {\n  constructor ({ abi, log, initConfig, nod3, txBlockNumber } = {}) {\n    initConfig = initConfig || {}\n    const { net } = initConfig\n    this.netId = (net) ? net.id : undefined\n    this.abi = setAbi(abi || defaultABI)\n    this.log = log || console\n    this.nod3 = nod3\n    this.nativeContracts = NativeContracts(initConfig)\n    if (this.netId) {\n      let bitcoinNetwork = bitcoinRskNetWorks[this.netId]\n      this.nativeContractsEvents = NativeContractsDecoder({ bitcoinNetwork, txBlockNumber })\n    }\n  }\n\n  setNod3 (nod3) {\n    this.nod3 = nod3\n  }\n\n  getNativeContractAddress (name) {\n    const { nativeContracts } = this\n    if (nativeContracts) {\n      return nativeContracts.getNativeContractAddress(name)\n    }\n  }\n\n  setAbi (abi) {\n    this.abi = setAbi(abi)\n  }\n\n  getMethodsSelectors () {\n    let selectors = {}\n    let methods = this.getAbiMethods()\n    for (let m in methods) {\n      let method = methods[m]\n      let signature = method.signature || soliditySignature(m)\n      selectors[m] = soliditySelector(signature)\n    }\n    return selectors\n  }\n\n  getAbiMethods () {\n    let methods = {}\n    this.abi.filter(def => def.type === 'function')\n      .map(m => {\n        let sig = m[ABI_SIGNATURE] || abiSignatureData(m)\n        sig.name = m.name\n        methods[sig.method] = sig\n      })\n    return methods\n  }\n\n  parseTxLogs (logs, abi) {\n    return this.decodeLogs(logs, abi).map(event => {\n      this.addEventAddresses(event)\n      event.abi = removeAbiSignatureData(event.abi)\n      return event\n    })\n  }\n\n  addEventAddresses (event) {\n    const { abi, args } = event\n    let _addresses = event._addresses || []\n    if (abi && args) {\n      let inputs = abi.inputs || []\n      inputs.forEach((v, i) => {\n        if (v.type === 'address') {\n          _addresses.push(args[i])\n        }\n        if (v.type === 'address[]') {\n          let value = args[i] || []\n          if (Array.isArray(value)) { // temp fix to undecoded events\n            value.forEach(v => _addresses.push(v))\n          } else {\n            let i = 0\n            while (2 + (i + 1) * 40 <= value.length) {\n              _addresses.push('0x' + value.slice(2 + i * 40, 2 + (i + 1) * 40))\n              i++\n            }\n          }\n        }\n      })\n      event._addresses = [...new Set(_addresses)]\n    }\n    return event\n  }\n\n  decodeLogs (logs, abi) {\n    abi = abi || this.abi\n    const eventDecoder = EventDecoder(abi, this.log)\n    if (!this.nativeContracts || !this.nativeContractsEvents) {\n      throw new Error(`Native contracts decoder is missing, check the value of netId:${this.netId}`)\n    }\n    const { isNativeContract } = this.nativeContracts\n    const { nativeContractsEvents } = this\n    return logs.map(log => {\n      const { address } = log\n      const decoder = (isNativeContract(address)) ? nativeContractsEvents.getEventDecoder(log) : eventDecoder\n      return decoder.decodeLog(log)\n    })\n  }\n\n  makeContract (address, abi) {\n    abi = abi || this.abi\n    let { nod3 } = this\n    return Contract(abi, { address, nod3 })\n  }\n\n  async call (method, contract, params = [], options = {}) {\n    try {\n      const res = await contract.call(method, params, options)\n      return res\n    } catch (err) {\n      // temporary fix to avoid errored contract calls spam logs\n      // this.log.warn(`Method ${method} call ${err}`)\n      return null\n    }\n  }\n\n  async getTokenData (contract, { methods } = {}) {\n    methods = methods || ['name', 'symbol', 'decimals', 'totalSupply']\n    let result = await Promise.all(\n      methods.map(m =>\n        this.call(m, contract)\n          .then(res => res)\n          .catch(err => this.log.debug(`[${contract.address}] Error executing ${m}  Error: ${err}`)))\n    )\n    return result.reduce((v, a, i) => {\n      let name = methods[i]\n      v[name] = a\n      return v\n    }, {})\n  }\n\n  getMethodsBySelectors (txInputData) {\n    let methods = this.getMethodsSelectors()\n    return Object.keys(methods)\n      .filter(method => hasMethodSelector(txInputData, methods[method]) === true)\n  }\n\n  async getContractInfo (txInputData, contract) {\n    let { interfaces, methods } = await this.getContractImplementedInterfaces(txInputData, contract)\n\n    interfaces = mapInterfacesToERCs(interfaces)\n    return { methods, interfaces }\n  }\n\n  async getEIP1967Info (contractAddress) {\n    const { isUpgradeable, impContractAddress } = await this.isERC1967(contractAddress)\n    if (isUpgradeable) {\n      // manual check required\n      const proxyContractBytecode = await this.getContractCodeFromNode(impContractAddress)\n      const methods = this.getMethodsBySelectors(proxyContractBytecode)\n      let interfaces = this.getInterfacesByMethods(methods)\n\n      interfaces = mapInterfacesToERCs(interfaces)\n      return { methods, interfaces: [...interfaces, 'ERC1967'] }\n    }\n    return {methods: [], interfaces: []}\n  }\n\n  async getContractImplementedInterfaces (txInputData, contract) {\n    let methods = this.getMethodsBySelectors(txInputData)\n    let isErc165 = false\n    //  skip non-erc165 contracts\n    if (includesAll(methods, ['supportsInterface(bytes4)'])) {\n      isErc165 = await this.implementsErc165(contract)\n    }\n    let interfaces\n    if (isErc165) {\n      interfaces = await this.getInterfacesERC165(contract)\n    } else {\n      interfaces = this.getInterfacesByMethods(methods)\n    }\n\n    return { methods, interfaces }\n  }\n\n  async isERC1967 (contractAddress) {\n    // check For ERC1967\n    // https://eips.ethereum.org/EIPS/eip-1967\n    // 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc storage address where the implementation address is stored\n    const storedValue = await this.nod3.eth.getStorageAt(contractAddress, '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc')\n    const isUpgradeable = storedValue !== '0x0'\n    if (isUpgradeable) {\n      const impContractAddress = `0x${storedValue.slice(-40)}` // extract contract address\n      return { isUpgradeable, impContractAddress }\n    } else {\n      return { isUpgradeable, impContractAddress: storedValue }\n    }\n  }\n\n  async getContractCodeFromNode (contractAddress) {\n    return this.nod3.eth.getContractCodeAt(contractAddress)\n  }\n\n  async getInterfacesERC165 (contract) {\n    let ifaces = {}\n    let keys = Object.keys(interfacesIds)\n    for (let i of keys) {\n      ifaces[i] = await this.supportsInterface(contract, interfacesIds[i].id)\n    }\n    return ifaces\n  }\n\n  getInterfacesByMethods (methods, isErc165) {\n    return Object.keys(interfacesIds)\n      .map(i => {\n        return [i, includesAll(methods, interfacesIds[i].methods)]\n      })\n      .reduce((obj, value) => {\n        obj[value[0]] = value[1]\n        return obj\n      }, {})\n  }\n\n  async supportsInterface (contract, interfaceId) {\n    // fixed gas to prevent infinite loops\n    let options = { gas: '0x7530' }\n    let res = await this.call('supportsInterface', contract, [interfaceId], options)\n    return res\n  }\n\n  async implementsErc165 (contract) {\n    try {\n      let first = await this.supportsInterface(contract, interfacesIds.ERC165.id)\n      if (first === true) {\n        let second = await this.supportsInterface(contract, '0xffffffff')\n        return !(second === true || second === null)\n      }\n      return false\n    } catch (err) {\n      return Promise.reject(err)\n    }\n  }\n}\n\nexport default ContractParser\n"],"mappings":"6HAAA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,uBAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,gBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,SAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,aAAA,GAAAN,sBAAA,CAAAC,OAAA;AACA,IAAAM,IAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,MAAA,GAAAP,OAAA;AACA,IAAAQ,MAAA,GAAAR,OAAA,YAMgB,SAAAD,uBAAAU,GAAA,UAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;;;;;;;;AAEhB,SAASG,mBAAmBA,CAAEC,UAAU,EAAE;EACxC,OAAOC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC;EAC3BG,MAAM,CAAC,CAAAC,CAAC,KAAIJ,UAAU,CAACI,CAAC,CAAC,KAAK,IAAI,CAAC;EACnCC,GAAG,CAAC,CAAAC,CAAC,KAAIC,0BAAmB,CAACD,CAAC,CAAC,IAAIA,CAAC,CAAC;AAC1C;;AAEA,SAASE,iBAAiBA,CAAEC,WAAW,EAAEC,QAAQ,EAAE;EACjD,OAAOA,QAAQ,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAACD,QAAQ,CAAC;AAClE;;AAEO,MAAME,cAAc,CAAC;EAC1BC,WAAWA,CAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAEC,IAAI,EAAEC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;IAC/DF,UAAU,GAAGA,UAAU,IAAI,CAAC,CAAC;IAC7B,MAAM,EAAEG,GAAG,CAAC,CAAC,GAAGH,UAAU;IAC1B,IAAI,CAACI,KAAK,GAAID,GAAG,GAAIA,GAAG,CAACE,EAAE,GAAGC,SAAS;IACvC,IAAI,CAACR,GAAG,GAAG,IAAAS,aAAM,EAACT,GAAG,IAAIU,YAAU,CAAC;IACpC,IAAI,CAACT,GAAG,GAAGA,GAAG,IAAIU,OAAO;IACzB,IAAI,CAACR,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACS,eAAe,GAAG,IAAAC,wBAAe,EAACX,UAAU,CAAC;IAClD,IAAI,IAAI,CAACI,KAAK,EAAE;MACd,IAAIQ,cAAc,GAAGC,yBAAkB,CAAC,IAAI,CAACT,KAAK,CAAC;MACnD,IAAI,CAACU,qBAAqB,GAAG,IAAAC,+BAAsB,EAAC,EAAEH,cAAc,EAAEV,aAAa,CAAC,CAAC,CAAC;IACxF;EACF;;EAEAc,OAAOA,CAAEf,IAAI,EAAE;IACb,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;;EAEAgB,wBAAwBA,CAAEC,IAAI,EAAE;IAC9B,MAAM,EAAER,eAAe,CAAC,CAAC,GAAG,IAAI;IAChC,IAAIA,eAAe,EAAE;MACnB,OAAOA,eAAe,CAACO,wBAAwB,CAACC,IAAI,CAAC;IACvD;EACF;;EAEAX,MAAMA,CAAET,GAAG,EAAE;IACX,IAAI,CAACA,GAAG,GAAG,IAAAS,aAAM,EAACT,GAAG,CAAC;EACxB;;EAEAqB,mBAAmBA,CAAA,EAAI;IACrB,IAAIC,SAAS,GAAG,CAAC,CAAC;IAClB,IAAIC,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IAClC,KAAK,IAAIC,CAAC,IAAIF,OAAO,EAAE;MACrB,IAAIG,MAAM,GAAGH,OAAO,CAACE,CAAC,CAAC;MACvB,IAAIE,SAAS,GAAGD,MAAM,CAACC,SAAS,IAAI,IAAAC,wBAAiB,EAACH,CAAC,CAAC;MACxDH,SAAS,CAACG,CAAC,CAAC,GAAG,IAAAI,uBAAgB,EAACF,SAAS,CAAC;IAC5C;IACA,OAAOL,SAAS;EAClB;;EAEAE,aAAaA,CAAA,EAAI;IACf,IAAID,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,CAACvB,GAAG,CAACX,MAAM,CAAC,CAAAyC,GAAG,KAAIA,GAAG,CAACC,IAAI,KAAK,UAAU,CAAC;IAC5CxC,GAAG,CAAC,CAAAkC,CAAC,KAAI;MACR,IAAIO,GAAG,GAAGP,CAAC,CAACQ,oBAAa,CAAC,IAAI,IAAAC,uBAAgB,EAACT,CAAC,CAAC;MACjDO,GAAG,CAACZ,IAAI,GAAGK,CAAC,CAACL,IAAI;MACjBG,OAAO,CAACS,GAAG,CAACN,MAAM,CAAC,GAAGM,GAAG;IAC3B,CAAC,CAAC;IACJ,OAAOT,OAAO;EAChB;;EAEAY,WAAWA,CAAEC,IAAI,EAAEpC,GAAG,EAAE;IACtB,OAAO,IAAI,CAACqC,UAAU,CAACD,IAAI,EAAEpC,GAAG,CAAC,CAACT,GAAG,CAAC,CAAA+C,KAAK,KAAI;MAC7C,IAAI,CAACC,iBAAiB,CAACD,KAAK,CAAC;MAC7BA,KAAK,CAACtC,GAAG,GAAG,IAAAwC,6BAAsB,EAACF,KAAK,CAACtC,GAAG,CAAC;MAC7C,OAAOsC,KAAK;IACd,CAAC,CAAC;EACJ;;EAEAC,iBAAiBA,CAAED,KAAK,EAAE;IACxB,MAAM,EAAEtC,GAAG,EAAEyC,IAAI,CAAC,CAAC,GAAGH,KAAK;IAC3B,IAAII,UAAU,GAAGJ,KAAK,CAACI,UAAU,IAAI,EAAE;IACvC,IAAI1C,GAAG,IAAIyC,IAAI,EAAE;MACf,IAAIE,MAAM,GAAG3C,GAAG,CAAC2C,MAAM,IAAI,EAAE;MAC7BA,MAAM,CAACC,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACvB,IAAID,CAAC,CAACd,IAAI,KAAK,SAAS,EAAE;UACxBW,UAAU,CAACK,IAAI,CAACN,IAAI,CAACK,CAAC,CAAC,CAAC;QAC1B;QACA,IAAID,CAAC,CAACd,IAAI,KAAK,WAAW,EAAE;UAC1B,IAAIiB,KAAK,GAAGP,IAAI,CAACK,CAAC,CAAC,IAAI,EAAE;UACzB,IAAIG,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE,CAAE;YAC1BA,KAAK,CAACJ,OAAO,CAAC,CAAAC,CAAC,KAAIH,UAAU,CAACK,IAAI,CAACF,CAAC,CAAC,CAAC;UACxC,CAAC,MAAM;YACL,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC,IAAI,EAAE,IAAIE,KAAK,CAACG,MAAM,EAAE;cACvCT,UAAU,CAACK,IAAI,CAAC,IAAI,GAAGC,KAAK,CAACI,KAAK,CAAC,CAAC,GAAGN,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;cACjEA,CAAC,EAAE;YACL;UACF;QACF;MACF,CAAC,CAAC;MACFR,KAAK,CAACI,UAAU,GAAG,CAAC,GAAG,IAAIW,GAAG,CAACX,UAAU,CAAC,CAAC;IAC7C;IACA,OAAOJ,KAAK;EACd;;EAEAD,UAAUA,CAAED,IAAI,EAAEpC,GAAG,EAAE;IACrBA,GAAG,GAAGA,GAAG,IAAI,IAAI,CAACA,GAAG;IACrB,MAAMsD,YAAY,GAAG,IAAAC,qBAAY,EAACvD,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC;IAChD,IAAI,CAAC,IAAI,CAACW,eAAe,IAAI,CAAC,IAAI,CAACI,qBAAqB,EAAE;MACxD,MAAM,IAAIwC,KAAK,CAAE,iEAAgE,IAAI,CAAClD,KAAM,EAAC,CAAC;IAChG;IACA,MAAM,EAAEmD,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC7C,eAAe;IACjD,MAAM,EAAEI,qBAAqB,CAAC,CAAC,GAAG,IAAI;IACtC,OAAOoB,IAAI,CAAC7C,GAAG,CAAC,CAAAU,GAAG,KAAI;MACrB,MAAM,EAAEyD,OAAO,CAAC,CAAC,GAAGzD,GAAG;MACvB,MAAM0D,OAAO,GAAIF,gBAAgB,CAACC,OAAO,CAAC,GAAI1C,qBAAqB,CAAC4C,eAAe,CAAC3D,GAAG,CAAC,GAAGqD,YAAY;MACvG,OAAOK,OAAO,CAACE,SAAS,CAAC5D,GAAG,CAAC;IAC/B,CAAC,CAAC;EACJ;;EAEA6D,YAAYA,CAAEJ,OAAO,EAAE1D,GAAG,EAAE;IAC1BA,GAAG,GAAGA,GAAG,IAAI,IAAI,CAACA,GAAG;IACrB,IAAI,EAAEG,IAAI,CAAC,CAAC,GAAG,IAAI;IACnB,OAAO,IAAA4D,iBAAQ,EAAC/D,GAAG,EAAE,EAAE0D,OAAO,EAAEvD,IAAI,CAAC,CAAC,CAAC;EACzC;;EAEA,MAAM6D,IAAIA,CAAEtC,MAAM,EAAEuC,QAAQ,EAAEC,MAAM,GAAG,EAAE,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvD,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMH,QAAQ,CAACD,IAAI,CAACtC,MAAM,EAAEwC,MAAM,EAAEC,OAAO,CAAC;MACxD,OAAOC,GAAG;IACZ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA;MACA,OAAO,IAAI;IACb;EACF;;EAEA,MAAMC,YAAYA,CAAEL,QAAQ,EAAE,EAAE1C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;IAC9CA,OAAO,GAAGA,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC;IAClE,IAAIgD,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG;MAC5BlD,OAAO,CAAChC,GAAG,CAAC,CAAAkC,CAAC;MACX,IAAI,CAACuC,IAAI,CAACvC,CAAC,EAAEwC,QAAQ,CAAC;MACnBS,IAAI,CAAC,CAAAN,GAAG,KAAIA,GAAG,CAAC;MAChBO,KAAK,CAAC,CAAAN,GAAG,KAAI,IAAI,CAACpE,GAAG,CAAC2E,KAAK,CAAE,IAAGX,QAAQ,CAACP,OAAQ,qBAAoBjC,CAAE,YAAW4C,GAAI,EAAC,CAAC,CAAC;IAChG,CAAC;IACD,OAAOE,MAAM,CAACM,MAAM,CAAC,CAAChC,CAAC,EAAEiC,CAAC,EAAEhC,CAAC,KAAK;MAChC,IAAI1B,IAAI,GAAGG,OAAO,CAACuB,CAAC,CAAC;MACrBD,CAAC,CAACzB,IAAI,CAAC,GAAG0D,CAAC;MACX,OAAOjC,CAAC;IACV,CAAC,EAAE,CAAC,CAAC,CAAC;EACR;;EAEAkC,qBAAqBA,CAAEpF,WAAW,EAAE;IAClC,IAAI4B,OAAO,GAAG,IAAI,CAACF,mBAAmB,CAAC,CAAC;IACxC,OAAOlC,MAAM,CAACC,IAAI,CAACmC,OAAO,CAAC;IACxBlC,MAAM,CAAC,CAAAqC,MAAM,KAAIhC,iBAAiB,CAACC,WAAW,EAAE4B,OAAO,CAACG,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC;EAC/E;;EAEA,MAAMsD,eAAeA,CAAErF,WAAW,EAAEsE,QAAQ,EAAE;IAC5C,IAAI,EAAE/E,UAAU,EAAEqC,OAAO,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC0D,gCAAgC,CAACtF,WAAW,EAAEsE,QAAQ,CAAC;;IAEhG/E,UAAU,GAAGD,mBAAmB,CAACC,UAAU,CAAC;IAC5C,OAAO,EAAEqC,OAAO,EAAErC,UAAU,CAAC,CAAC;EAChC;;EAEA,MAAMgG,cAAcA,CAAEC,eAAe,EAAE;IACrC,MAAM,EAAEC,aAAa,EAAEC,kBAAkB,CAAC,CAAC,GAAG,MAAM,IAAI,CAACC,SAAS,CAACH,eAAe,CAAC;IACnF,IAAIC,aAAa,EAAE;MACjB;MACA,MAAMG,qBAAqB,GAAG,MAAM,IAAI,CAACC,uBAAuB,CAACH,kBAAkB,CAAC;MACpF,MAAM9D,OAAO,GAAG,IAAI,CAACwD,qBAAqB,CAACQ,qBAAqB,CAAC;MACjE,IAAIrG,UAAU,GAAG,IAAI,CAACuG,sBAAsB,CAAClE,OAAO,CAAC;;MAErDrC,UAAU,GAAGD,mBAAmB,CAACC,UAAU,CAAC;MAC5C,OAAO,EAAEqC,OAAO,EAAErC,UAAU,EAAE,CAAC,GAAGA,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;IAC5D;IACA,OAAO,EAACqC,OAAO,EAAE,EAAE,EAAErC,UAAU,EAAE,EAAE,EAAC;EACtC;;EAEA,MAAM+F,gCAAgCA,CAAEtF,WAAW,EAAEsE,QAAQ,EAAE;IAC7D,IAAI1C,OAAO,GAAG,IAAI,CAACwD,qBAAqB,CAACpF,WAAW,CAAC;IACrD,IAAI+F,QAAQ,GAAG,KAAK;IACpB;IACA,IAAI,IAAAC,qBAAW,EAACpE,OAAO,EAAE,CAAC,2BAA2B,CAAC,CAAC,EAAE;MACvDmE,QAAQ,GAAG,MAAM,IAAI,CAACE,gBAAgB,CAAC3B,QAAQ,CAAC;IAClD;IACA,IAAI/E,UAAU;IACd,IAAIwG,QAAQ,EAAE;MACZxG,UAAU,GAAG,MAAM,IAAI,CAAC2G,mBAAmB,CAAC5B,QAAQ,CAAC;IACvD,CAAC,MAAM;MACL/E,UAAU,GAAG,IAAI,CAACuG,sBAAsB,CAAClE,OAAO,CAAC;IACnD;;IAEA,OAAO,EAAEA,OAAO,EAAErC,UAAU,CAAC,CAAC;EAChC;;EAEA,MAAMoG,SAASA,CAAEH,eAAe,EAAE;IAChC;IACA;IACA;IACA,MAAMW,WAAW,GAAG,MAAM,IAAI,CAAC3F,IAAI,CAAC4F,GAAG,CAACC,YAAY,CAACb,eAAe,EAAE,oEAAoE,CAAC;IAC3I,MAAMC,aAAa,GAAGU,WAAW,KAAK,KAAK;IAC3C,IAAIV,aAAa,EAAE;MACjB,MAAMC,kBAAkB,GAAI,KAAIS,WAAW,CAAC1C,KAAK,CAAC,CAAC,EAAE,CAAE,EAAC,EAAC;MACzD,OAAO,EAAEgC,aAAa,EAAEC,kBAAkB,CAAC,CAAC;IAC9C,CAAC,MAAM;MACL,OAAO,EAAED,aAAa,EAAEC,kBAAkB,EAAES,WAAW,CAAC,CAAC;IAC3D;EACF;;EAEA,MAAMN,uBAAuBA,CAAEL,eAAe,EAAE;IAC9C,OAAO,IAAI,CAAChF,IAAI,CAAC4F,GAAG,CAACE,iBAAiB,CAACd,eAAe,CAAC;EACzD;;EAEA,MAAMU,mBAAmBA,CAAE5B,QAAQ,EAAE;IACnC,IAAIiC,MAAM,GAAG,CAAC,CAAC;IACf,IAAI9G,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC+G,sBAAa,CAAC;IACrC,KAAK,IAAIrD,CAAC,IAAI1D,IAAI,EAAE;MAClB8G,MAAM,CAACpD,CAAC,CAAC,GAAG,MAAM,IAAI,CAACsD,iBAAiB,CAACnC,QAAQ,EAAEkC,sBAAa,CAACrD,CAAC,CAAC,CAACvC,EAAE,CAAC;IACzE;IACA,OAAO2F,MAAM;EACf;;EAEAT,sBAAsBA,CAAElE,OAAO,EAAEmE,QAAQ,EAAE;IACzC,OAAOvG,MAAM,CAACC,IAAI,CAAC+G,sBAAa,CAAC;IAC9B5G,GAAG,CAAC,CAAAuD,CAAC,KAAI;MACR,OAAO,CAACA,CAAC,EAAE,IAAA6C,qBAAW,EAACpE,OAAO,EAAE4E,sBAAa,CAACrD,CAAC,CAAC,CAACvB,OAAO,CAAC,CAAC;IAC5D,CAAC,CAAC;IACDsD,MAAM,CAAC,CAAC/F,GAAG,EAAEkE,KAAK,KAAK;MACtBlE,GAAG,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;MACxB,OAAOlE,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACV;;EAEA,MAAMsH,iBAAiBA,CAAEnC,QAAQ,EAAEoC,WAAW,EAAE;IAC9C;IACA,IAAIlC,OAAO,GAAG,EAAEmC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC/B,IAAIlC,GAAG,GAAG,MAAM,IAAI,CAACJ,IAAI,CAAC,mBAAmB,EAAEC,QAAQ,EAAE,CAACoC,WAAW,CAAC,EAAElC,OAAO,CAAC;IAChF,OAAOC,GAAG;EACZ;;EAEA,MAAMwB,gBAAgBA,CAAE3B,QAAQ,EAAE;IAChC,IAAI;MACF,IAAIsC,KAAK,GAAG,MAAM,IAAI,CAACH,iBAAiB,CAACnC,QAAQ,EAAEkC,sBAAa,CAACK,MAAM,CAACjG,EAAE,CAAC;MAC3E,IAAIgG,KAAK,KAAK,IAAI,EAAE;QAClB,IAAIE,MAAM,GAAG,MAAM,IAAI,CAACL,iBAAiB,CAACnC,QAAQ,EAAE,YAAY,CAAC;QACjE,OAAO,EAAEwC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,IAAI,CAAC;MAC9C;MACA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOpC,GAAG,EAAE;MACZ,OAAOG,OAAO,CAACkC,MAAM,CAACrC,GAAG,CAAC;IAC5B;EACF;AACF,CAACsC,OAAA,CAAA7G,cAAA,GAAAA,cAAA,KAAA8G,QAAA,GAAAD,OAAA,CAAA3H,OAAA;;AAEcc,cAAc"}